//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//******** master.prisma start *********

model MRole {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  users     User[]

  @@map("m_roles")
}

model MTag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  posts     PostBelongToTag[]

  @@map("m_tags")
}

//******** master.prisma end *********

model Member {
  id                Int         @id @default(autoincrement())
  name              String
  email             String      @unique
  password          String
  rememberToken     String?     @map("remember_token")
  rememberExpiresAt DateTime?   @map("remember_expires_at") @db.Timestamptz
  confirmToken      String?     @map("confirm_token")
  confirmExpiresAt  DateTime?   @map("confirm_expires_at") @db.Timestamptz
  confirmStatus     String      @map("confirm_status") @db.Char(1) // 0:未確認 1:確認済
  image             String?
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("members")
}

//******** nextauth.prisma start *********

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  createdAt          DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  roleId        Int
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  profile       Profile?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  role          MRole    @relation(fields: [roleId], references: [id])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String     @unique
  expires    DateTime
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//******** nextauth.prisma end *********

model PostBelongToTag {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  posts     Post   @relation(fields: [postId], references: [id])
  tags      MTag   @relation(fields: [tagId], references: [id])
  @@map("post_belong_to_tag")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  linkPath  String   @map("link_path")
  imagePath String?  @map("image_path")
  published Boolean  @default(false)
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  tags      PostBelongToTag[]

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Profile {
  id        Int      @id @default(autoincrement())
  bio       String?
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}